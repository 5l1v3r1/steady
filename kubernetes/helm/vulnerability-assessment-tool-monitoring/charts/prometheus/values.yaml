rbac:
  # _n_ rbac.create
  # _d_ bool to decide whether or not to add rbac layer
  create: true

kubeStateMetrics:
  # _n_ kubeStateMetrics.enabled
  # _d_ bool to decide whether or not to add kubemetrics
  enabled: true
  replicas: 1

  selfAntiAffinity:
    soft: true
    weight: 100

  image:
    pullPolicy: "IfNotPresent"
    registry: quay.io
    registryPort: {}
    name: coreos/kube-state-metrics
    tag: "v1.7.2"

    livenessProbe:
      # _n_ kubeStateMetrics.image.livenessProbe.enabled
      # _i_
      # Overall time before container is killed by k8s :
      # initialDelaySeconds + ((periodSeconds + timeoutSeconds) * failureThreshold)
      # = 775s ~= 13min
      enabled: false
      initialDelaySeconds: 5
      periodSeconds: 30
      timeoutSeconds: 5
      failureThreshold: 5

    readinessProbe:
      # _n_ kubeStateMetrics.image.readinessProbe.enabled
      # _i_
      # Overall time before container is considered unready by k8s :
      # initialDelaySeconds + ((periodSeconds + timeoutSeconds) * successThreshold)
      # = 205s ~= 3.5min
      enabled: false
      initialDelaySeconds: 5
      periodSeconds: 30
      timeoutSeconds: 5
      failureThreshold: 5

    resources:
      limits:
        cpu: 40m
        memory: 64Mi
      requests:
        cpu: 10m
        memory: 32Mi

    securityContext:
      runAsUser: 65534

nodeExporter:
  # _n_ nodeExporter.enabled
  # _d_ bool to decide whether or not to add nodeExporter
  enabled: true

  selfAntiAffinity:
    soft: true
    weight: 100

  image:
    pullPolicy: "IfNotPresent"
    registry: {}
    registryPort: {}
    name: prom/node-exporter
    tag: "v0.18.1"

    livenessProbe:
      # _n_ nodeExporter.image.livenessProbe.enabled
      # _i_
      # Overall time before container is killed by k8s :
      # initialDelaySeconds + ((periodSeconds + timeoutSeconds) * failureThreshold)
      # = 775s ~= 13min
      enabled: false
      initialDelaySeconds: 5
      periodSeconds: 30
      timeoutSeconds: 5
      failureThreshold: 5

    readinessProbe:
      # _n_ nodeExporter.image.readinessProbe.enabled
      # _i_
      # Overall time before container is considered unready by k8s :
      # initialDelaySeconds + ((periodSeconds + timeoutSeconds) * successThreshold)
      # = 205s ~= 3.5min
      enabled: false
      initialDelaySeconds: 5
      periodSeconds: 30
      timeoutSeconds: 5
      failureThreshold: 5

    resources:
      limits:
        cpu: 200m
        memory: 50Mi
      requests:
        cpu: 100m
        memory: 30Mi

    securityContext: {}

  podSecurityPolicy:
    enabled: true
    ## If true, node-exporter pods share the host network namespace
    ##
    hostNetwork: true
    ## If true, node-exporter pods share the host PID namespace
    ##
    hostPID: true

server:
  path: "/monitoring/prometheus/"
  replicas: 1
  podManagementPolicy: "Parallel"
  # _n_ server.enableAdminApi
  # _d_ bool to allow admin api
  enableAdminApi: true
  # _n_ server.retention
  # _d_ metrics retention duration
  retention: "90d"

  selfAntiAffinity:
    soft: true
    weight: 100

  persistentVolume:
    # _n_ server.persistentVolume.enabled
    # _d_ bool to decide whether pv is required
    enabled: false
    mountPath: /data
    storage: "2Gi"

  image:
    mainContainer:
      pullPolicy: "IfNotPresent"
      registry: {}
      registryPort: {}
      name: prom/prometheus
      tag: "v2.12.0"

      livenessProbe:
        # _n_ server.image.mainContainer.livenessProbe.enabled
        # _i_
        # Overall time before container is killed by k8s :
        # initialDelaySeconds + ((periodSeconds + timeoutSeconds) * failureThreshold)
        # = 775s ~= 13min
        enabled: false
        initialDelaySeconds: 30
        periodSeconds: 30
        timeoutSeconds: 5
        failureThreshold: 5
        successThreshold: 1
        path: /healthy

      readinessProbe:
        # _n_ server.image.mainContainer.readinessProbe.enabled
        # _i_
        # Overall time before container is considered unready by k8s :
        # initialDelaySeconds + ((periodSeconds + timeoutSeconds) * successThreshold)
        # = 205s ~= 3.5min
        enabled: false
        initialDelaySeconds: 30
        periodSeconds: 30
        timeoutSeconds: 5
        failureThreshold: 5
        successThreshold: 1
        path: /ready

      resources:
        limits:
          cpu: 500m
          memory: 512Mi
        requests:
          cpu: 500m
          memory: 512Mi
      securityContext: {}
